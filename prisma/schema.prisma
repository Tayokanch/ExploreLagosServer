// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Location {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  about      String
  price      Int
  category   String
  highlights Json
  bookings   Bookings[]
  staffs     Staff[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Reviews    Reviews[]
}

model User {
  id        Int        @id @default(autoincrement())
  firstname String
  lastname  String
  email     String     @unique
  password  String
  bookings  Bookings[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Reviews   Reviews[]
}

model Bookings {
  id           Int       @id @default(autoincrement())
  locationName String
  printName    String
  bookingfor   String
  price        Int
  userId       Int
  user         User?     @relation(fields: [userId], references: [id])
  locationId   Int
  location     Location? @relation(fields: [locationId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  visitingDate String
  referenceNo  String
}

model Staff {
  id         Int       @id @default(autoincrement())
  firstname  String
  lastname   String
  username   String    @unique
  email      String    @unique
  password   String
  role       String
  locationId Int
  location   Location? @relation(fields: [locationId], references: [id])
}

model Reviews {
  id         Int       @id @default(autoincrement())
  content    String
  userId     Int
  user       User?     @relation(fields: [userId], references: [id])
  locationId Int
  location   Location? @relation(fields: [locationId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
